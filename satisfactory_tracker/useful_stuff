Troubleshoting:
    When installed packages aren't recognised:
        Check >Python Interpreter in Command Palette to make sure it's pointing to the right python installation.
    Issues with conflicting package versions:
        # This will blow away the node_modules directory, the package-lock.json file, and reinstall the all packages.
        # Make sure any dependencies on specific versions are updated in the package.json file.
        Remove-Item -Recurse -Force .\node_modules
        Remove-Item -Force .\package-lock.json
        npm install


Build & Run the Application:
    # IMPORTANT: Make sure you set the RUN_MODE variables in the .env file before proceding.
        # local - for local development on your machine
        # docker - for running the application in Docker
    # The scripts in package.json have been updated to start the client and server by calling npm start.
    # Make sure you've run npm install concurrently --save-dev 
    # This will start the flask server and the react server in watch mode and changes will be reflected in the browser in real-time.
    cd satisfactory_tracker # if not already in the directory
    .\venv\Scripts\activate # if not already in the virtual environment
    npm run build # Build the React app if needed.
    npm start # Start the servers. Ctrl C to stop the servers.
    # The application built using npm build will be running at http://localhost:5000/
    # The development server will be running at http://localhost:3000/

Auto Build and Run Application:
    # This will activate the virtual env, run the npm build, start the flask server, the react server and open the browser to the react server.
    # The application built using npm build will be running at http://localhost:5000/
    # The development server will be running at http://localhost:3000/
    python run_app.py # in satisfactory_tracker directory. 
    # Ctrl C to stop the servers. Doesn't exit as gracefully as npm start.
    
Virtual environment:
    Set Up:
        # 1) Create the virtual environment
            python -m venv venv
        # 2) Activate the virtual environment
            # LINUX command to activate the virtual environment.
                source venv/bin/activate 
            # WINDOWS command to activate the virtual environment.
                .\venv\Scripts\activate
        # 3) Install the required pip packages
            # pip package installation
                pip install -r pip_requirements.txt
        # 4) Install the required npm packages
            # LINUX command to install the required packages.
                xargs -a npm_requirements.txt npm install 
            # WINDOWS command to install the required packages.
                Get-Content -Path npm_requirements.txt | ForEach-Object {npm install $_}
        
    Delete:
        # LINUX command to delete the virtual environment.
            rm -rf venv
        # WINDOWS command to delete the virtual environment.
            Remove-Item -Recurse -Force .\venv
        # Alternatively, you can manually delete the venv directory using File Explorer.
    Turn on virtual environment:
        # LINUX command to activate the virtual environment.
            source venv/bin/activate
        # WINDOWS command to activate the virtual environment.
        .\venv\Scripts\activate
    Turn off virtual environment:
        deactivate

Docker:
    docker-compose down # Stop the containers
    docker-compose build # Build the Docker images. Add --no-cache to build without using the cache (useful for debugging)
    docker-compose up # Start the containers. 
        # Add -d to start in detached mode. 
        # Add --build to build the images before starting the containers
        # Add --force-recreate to force the recreation of the containers
        # Add --remove-orphans to remove containers for services not defined in the Compose file
        # Add --renew-anon-volumes to recreate anonymous volumes instead of retrieving data from the previous containers
    # Useful commands:
        docker exec -it satisfactory_tracker-app-1 bash # Access the bash shell in the app container
        docker ps # Confirm the containers are running
        docker logs satisfactory_tracker-app-1 # Check for the Flask app
        docker debug satisfactory_tracker-app-1 # Debug the app container

npm commands:
    npm run build
    npm start # uses concurrently to start the both react and flask servers in the package.json scripts

Code stuff:
    formatting of TODOs:
        #TODO:

Project relative paths:
    \satisfactory_tracker\
    \satisfactory_tracker\SQLite_stuff
    \satisfactory_tracker\excel_stuff

db commands:
    Blow away the database and start over:
        # 1) Delete the database file.
            # LINUX command to remove the database.
                rm satisfactory_parts.db 
            # WINDOWS command to remove the database.
                del satisfactory_parts.db
            # Alternatively, you can manually delete the satisfactory_parts.db file using File Explorer.
        # 2) Recreate the database.
            flask db stamp head # Stamp the current migration.
            flask db migrate -m "your description" # Change the message as needed.
            flask db upgrade # Upgrade to the latest migration.
        # 3) Migrate the data from the Excel file to the database.
            cd SQLite_stuff # if not already in the directory
            python migrate_data.py # Migration script to move data from Excel to SQLite database.
Other Flask commands:
        flask db downgrade # Downgrade to the previous migration.
        flask db history # Show the migration history.
        flask db heads # Show the current migration.
        flask db stamp head # Stamp the current migration.

SQLite Installation Folder:
    F:\Programs\SQLite3\sqlite3.exe # Handy for me. Change path as needed.
SQLite commands:
    sqlite3 satisfactory_parts.db .dump > backup.sql # Backup the database. Preferably BEFORE you make massive changes! :P

Key files:
    General:
        \config.py
        \run_app.py
        \pip_requirements.txt
        \npm_requirements.txt
        \useful_stuff
    SQLite:
        \satisfactory_tracker\SQLite_stuff\satisfactory_parts.db # Database file
        \satisfactory_tracker\SQLite_stuff\Satifactory Parts Data v1.xlsx # Excel file containing the initial data
        \satisfactory_tracker\SQLite_stuff\migrate_data.py # Migration script to move data from Excel to SQLite database.
    Flask:
        \satisfactory_tracker\app\__init__.py # App initialization and configuration
        \satisfactory_tracker\app\models.py # Database models and relationships
        \satisfactory_tracker\app\routes.py # Routes and views
    React:
        \satisfactory_tracker\src\pages\DataManagementPage.js # Data Management Page for the React app
        \satisfactory_tracker\src\pages\EditModal.js # Edit Modal form for the React app
        \satisfactory_tracker\src\pages\HomePage.js # Home Page for the React app
        \satisfactory_tracker\src\pages\LoginPage.js # Login Page for the React app
        \satisfactory_tracker\src\services\api.js # API service for the React app
        \satisfactory_tracker\App.js # Main App component for the React app

Visual Studio:
    # Exclude venv and node_modules from search. Copy into the files to exclude text box in the search tab.
        satisfactory_tracker\venv\**\, satisfactory_tracker\node_modules\**\
        

